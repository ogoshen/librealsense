# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        ref: web-dev
    
    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.

    - name: Setup Emscripten
      uses: lovasoa/setup-emscripten@v1
    
#     - name: Activate Emscripten
#       run: source ../../../../../opt/hostedtoolcache/emscripten/latest/x64/emsdk_env.sh

#     - name: copy exported_functions.json to buildDirectory
#       run: cp ${{ runner.workspace }}/librealsense/src/webusb/exported_functions.json ${{ github.workspace }}/../../_temp/exported_functions.json

    - name: run-cmake
      uses: lukka/run-cmake@v2.3
      with:
        cmakeGenerator: 'Ninja'
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: 'Release' 
        cmakeAppendedArgs: "-GNinja -DEMSCRIPTEN=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_WITH_STATIC_CRT=OFF -DIMPORT_DEPTH_CAM_FW=OFF -DBUILD_WITH_TM2=OFF -DBUILD_EXAMPLES=OFF -DBUILD_GRAPHICAL_EXAMPLES=OFF -DBUILD_GLSL_EXTENSIONS=OFF -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake"
        buildWithCMakeArgs: '--config Release -- -v'
        cmakeWrapperCommand: emcmake
        cmakeToolchainPath: "$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake"
      env:
        EMSDK: /opt/hostedtoolcache/emscripten/latest/x64
        CXXFLAGS: -s WASM=1 -s ASYNCIFY -s USE_PTHREADS=1 -s PTHREADS_DEBUG=1 -s PTHREAD_POOL_SIZE=1 -s FORCE_FILESYSTEM=1 -s EXPORTED_FUNCTIONS=@${{ runner.workspace }}/librealsense/src/webusb/exported_functions.json -s EXTRA_EXPORTED_RUNTIME_METHODS="['ccall', 'cwrap', 'setValue', 'getValue', 'FS', 'addFunction', 'AsciiToString']" -s INITIAL_MEMORY=256MB -s ALLOW_TABLE_GROWTH=1 -s DISABLE_EXCEPTION_CATCHING=0 -O3 -g4
        CFLAGS: -s WASM=1 -s ASYNCIFY -s USE_PTHREADS=1 -s PTHREADS_DEBUG=1 -s PTHREAD_POOL_SIZE=1 -s FORCE_FILESYSTEM=1 -s EXPORTED_FUNCTIONS=@${{ runner.workspace }}/librealsense/src/webusb/exported_functions.json -s EXTRA_EXPORTED_RUNTIME_METHODS="['ccall', 'cwrap', 'setValue', 'getValue', 'FS', 'addFunction', 'AsciiToString']" -s INITIAL_MEMORY=256MB -s ALLOW_TABLE_GROWTH=1 -s DISABLE_EXCEPTION_CATCHING=0 -O3 -g4
